class TestCase::Sys::IO {
  use Sys::IO;
  use Sys::IO::Constant as IO;
  use Sys::FileTest;

  static method mkdir : int ($test_dir : string) {
    my $dir = "$test_dir/foo";
    
    Sys::IO->mkdir($dir, 0755);
    
    unless (Sys::FileTest->d($dir)) {
      return 0;
    }
    
    return 1;
  }

  static method rmdir : int ($test_dir : string) {
    my $dir = "$test_dir/foo";
    
    Sys::IO->mkdir($dir, 0755);
    
    unless (Sys::FileTest->d($dir)) {
      return 0;
    }
    
    Sys::IO->rmdir($dir);
    
    if (Sys::FileTest->e($dir)) {
      return 0;
    }
    
    return 1;
  }

  static method unlink : int ($test_dir : string) {

    my $file = "$test_dir/foo.txt";
    Sys::IO->fopen($file, "w");
    
    unless (Sys::FileTest->f($file)) {
      return 0;
    }
    
    Sys::IO->unlink($file);
    
    if (Sys::FileTest->e($file)) {
      return 0;
    }
    
    return 1;
  }

  static method fileno : int ($test_dir : string) {

    my $file = "$test_dir/foo.txt";
    my $fs = Sys::IO->fopen($file, "w");
    
    unless (Sys::FileTest->f($file)) {
      return 0;
    }
    
    my $fd = Sys::IO->fileno($fs);
    
    unless ($fd >= 0) {
      return 0;
    }
    
    return 1;
  }
  
  static method open : int ($test_dir : string) {
    
    {
      my $file = "$test_dir/ftest/file_empty.txt";
      my $fd = Sys::IO->open($file, IO->O_RDWR, IO->O_TRUNC);
      
      unless ($fd >= 0) {
        return 0;
      }
    }
    
    {
      my $file = "$test_dir/ftest/not_found.txt";
      eval { Sys::IO->open($file, IO->O_RDWR, IO->O_TRUNC); };
      
      unless ($@) {
        return 0;
      }
      
      unless (error == class_id Error::System) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }

  static method close : int ($test_dir : string) {
    
    {
      my $file = "$test_dir/ftest/file_empty.txt";
      my $fd = Sys::IO->open($file, IO->O_RDWR, IO->O_TRUNC);
      
      unless ($fd >= 0) {
        return 0;
      }
      
      my $status = Sys::IO->close($fd);
      
      unless ($status == 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method fopen : int ($test_dir : string) {
    
    {
      my $file = "$test_dir/ftest/file_empty.txt";
      my $fs = Sys::IO->fopen($file, "rb");
      
      unless ($fs) {
        return 0;
      }
    }
    
    {
      my $file = "$test_dir/ftest/not_found.txt";
      eval { Sys::IO->fopen($file, "rb"); };
      
      unless ($@) {
        return 0;
      }
      
      unless (error == class_id Error::System) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method fdopen : int ($test_dir : string) {
    
    {
      my $file = "$test_dir/ftest/file_empty.txt";
      my $fd = Sys::IO->open($file, IO->O_RDWR, IO->O_TRUNC);
      
      unless ($fd >= 0) {
        return 0;
      }

      my $fs = Sys::IO->fdopen($fd, "rb");
      
      unless ($fs) {
        return 0;
      }
    }
    
    {
      eval { Sys::IO->fdopen(-1, "rb"); };
      
      unless ($@) {
        return 0;
      }
      
      unless (error == class_id Error::System) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }

  static method fclose : int ($test_dir : string) {
    
    {
      my $file = "$test_dir/ftest/file_empty.txt";
      my $fs = Sys::IO->fopen($file, "rb");
      
      unless ($fs) {
        return 0;
      }
      
      my $status = Sys::IO->fclose($fs);
      
      unless ($status == 0) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }
  
}
