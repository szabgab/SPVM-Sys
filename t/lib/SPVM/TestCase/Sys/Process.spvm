class TestCase::Sys::Process {
  use Sys::Process;
  use Sys::Process::Constant as Process;
  use Time;
  
  static method alarm : int () {
    
    my $rest1 = Sys::Process->alarm(5);
    
    unless ($rest1 == 0) {
      return 0;
    }
    
    my $rest2 = Sys::Process->alarm(5);
    
    unless ($rest2 == 5) {
      return 0;
    }
    
    return 1;
  }

  static method fork : int () {
    
    my $child_process_id = Sys::Process->fork;
    
    # The child process
    if ($child_process_id == 0) {
      Sys::Process->exit(0);
    }
    
    unless ($child_process_id > 0) {
      return 0;
    }
    
    return 1;
  }

  static method getpriority : int () {
    
    my $start = Time->time;
    
    my $nice = Sys::Process->getpriority(Process->PRIO_PROCESS, 0);
    
    unless ($nice == 0) {
      return 0;
    }
    
    # The constant values
    {
      Process->PRIO_PROCESS;
      Process->PRIO_PGRP;
      Process->PRIO_USER;
    }
    
    return 1;
  }

  static method setpriority : int () {
    
    my $start = Time->time;
    
    my $status = Sys::Process->setpriority(Process->PRIO_PROCESS, 0, 0);
    
    unless ($status == 0) {
      return 0;
    }
    
    return 1;
  }
  
  static method sleep : int () {
    
    my $start = Time->time;
    
    my $rest = Sys::Process->sleep(1);
    
    unless ($rest == 0) {
      return 0;
    }
    
    unless (Time->time - $start >= 1) {
      return 0;
    }
    
    return 1;
  }

  static method kill : int () {
    
    my $status = Sys::Process->kill(0, 0);
    
    unless ($status == 0) {
      return 0;
    }
    
    return 1;
  }

  static method wait : int () {
    
    my $child_process_id = Sys::Process->fork;
    
    # The child process
    if ($child_process_id == 0) {
      Sys::Process->exit(0);
    }
    
    unless ($child_process_id > 0) {
      return 0;
    }
    
    my $status = -1;
    my $ret_child_process_id = Sys::Process->wait(\$status);
    
    unless ($status == 0) {
      return 0;
    }
    unless ($ret_child_process_id > 0) {
      return 0;
    }
    
    return 1;
  }

  static method waitpid : int () {
    
    my $child_process_id = Sys::Process->fork;
    
    # The child process
    if ($child_process_id == 0) {
      Sys::Process->exit(0);
    }
    
    unless ($child_process_id > 0) {
      return 0;
    }
    
    my $status = -1;
    my $ret_child_process_id = Sys::Process->waitpid(-1, \$status, Process->WNOHANG);

    unless ($status == 0) {
      return 0;
    }
    unless ($ret_child_process_id > 0) {
      return 0;
    }
    
    return 1;
  }
}
