class Sys::Socket {
  use Sys::Socket::Addrinfo;
  use Sys::Socket::Sockaddr;
  use Sys::Socket::In_addr;
  use Sys::Socket::In6_addr;
  use Sys::Socket::Hostent;
  use Sys::Socket::Netent;
  use Sys::Socket::Servent;
  use Sys::Socket::Protoent;
  use Fn;
  use Sys::Socket::Constant as Sock;

  native static method sethostent : void ($stayopen : int);
  native static method endhostent : void ();
  native static method gethostent : Sys::Socket::Hostent ();

  native static method setnetent : void ($stayopen : int);
  native static method endnetent : void ();
  native static method getnetent : Sys::Socket::Netent ();

  native static method setservent : void ($stayopen : int);
  native static method endservent : void ();
  native static method getservent : Sys::Socket::Servent ();

  native static method setprotoent : void ($stayopen : int);
  native static method endprotoent : void ();
  native static method getprotoent : Sys::Socket::Protoent ();
  
  native static method getaddrinfo : int ($node : string, $service : string,
                $hints : Sys::Socket::Addrinfo,
                $res : Sys::Socket::Addrinfo[]);

  native static method getnameinfo : int ($addr : Sys::Socket::Sockaddr, $addrlen : int,
                $host : mutable string, $hostlen : int,
                $serv : mutable string, $servlen : int, $flag : int);

  native static method gai_strerror : string($gai_error_code : int);

  native static method socket : int ($socket_family : int, $socket_type : int, $protocol : int);

  native static method connect : int ($sockfd : int, $addr : Sys::Socket::Sockaddr, $addrlen : int);

  native static method bind : int ($sockfd : int, $addr : Sys::Socket::Sockaddr, $addrlen : int);
                 
  native static method accept : int ($sockfd : int, $addr : Sys::Socket::Sockaddr, $addrlen_ref : int*);

  native static method listen : int ($sockfd : int, $backlog : int);

  native static method shutdown : int ($sockfd : int, $how : int);

  native static method recv : int ($sockfd : int, $buf : mutable string, $len : int, $flags : int);

  native static method send : int ($sockfd : int, $buf : string, $len : int, $flags : int);

  native static method getpeername : int ($sockfd : int, $addr : Sys::Socket::Sockaddr, $addrlen_ref : int*);

  native static method getsockname : int ($sockfd : int, $addr : Sys::Socket::Sockaddr, $addrlen_ref : int*);

  native static method socketpair : int ($domain : int, $type : int, $protocol : int, $pair : int[]);

  native static method setsockopt : int ($sockfd : int, $level : int, $optname : int, $optval : string, $optlen : int);

  native static method setsockopt_int : int ($sockfd : int, $level : int, $optname : int, $optval : int);

  native static method getsockopt : int ($sockfd : int, $level : int, $optname : int, $optval_ref : string[], $optlen_ref : int*);

  native static method getsockopt_int : int ($sockfd : int, $level : int, $optname : int, $optval_ref : int*);
  
  native static method inet_aton : int ($input_address : string, $output_address : Sys::Socket::In_addr);

  native static method inet_ntoa : string ($in_addr : Sys::Socket::In_addr);

  native static method inet_pton : int ($address_family : int, $input_address : string, $output_address : object of Sys::Socket::In_addr|Sys::Socket::In6_addr);
  
  native static method inet_ntop : string ($address_family : int, $input_address : object of Sys::Socket::In_addr|Sys::Socket::In6_addr, $output_address : mutable string, $size : int);
  
  static  method inet_ntop_simple : string ($address_family : int, $input_address : object of Sys::Socket::In_addr|Sys::Socket::In6_addr) {
    my $output_address = (mutable string)new_string_len(Sock->INET6_ADDRSTRLEN);
    
    my $output_address_ret = (mutable string)&inet_ntop($address_family, $input_address, $output_address, length $output_address);
    
    if ($output_address_ret) {
      &shorten_null_char($output_address_ret);
    }
    
    return $output_address_ret;
  }
  
  private static method shorten_null_char : void ($string : mutable string) {
    
    if (!$string) {
      die "The string must be defined";
    }
    
    my $null_char_offset = -1;
    for (my $i = 0; $i < length $string; $i++) {
      my $char = $string->[$i];
      if ($char == '\0') {
        $null_char_offset = $i;
        last;
      }
    }
    
    if ($null_char_offset >= 0) {
      Fn->shorten($string, $null_char_offset);
    }
  }

=pod

Low-level socket functions

*getsockopt, *setsockopt, *socketpair, *socket, *connect, *bind, *accept, *listen, *shutdown, *recv, *send, *getpeername, *getsockname

*getaddrinfo, *getnameinfo, *gai_strerror

* $ip_address = inet_aton $string
* $string = inet_ntoa $ip_address
* $address = inet_pton $family, $string
* $string = inet_ntop $family, $address
* PF_INET, PF_INET6, PF_UNIX, ...
* AF_INET, AF_INET6, AF_UNIX, ...
* SOCK_STREAM, SOCK_DGRAM, SOCK_RAW, ...
* SOCK_NONBLOCK. SOCK_CLOEXEC
* SOL_SOCKET
* SO_ACCEPTCONN, SO_BROADCAST, SO_ERROR, ...
* IP_OPTIONS, IP_TOS, IP_TTL, ...
* IP_PMTUDISC_WANT, IP_PMTUDISC_DONT, ...
* IPTOS_LOWDELAY, IPTOS_THROUGHPUT, IPTOS_RELIABILITY, ...


CONSTANTS
MSG_BCAST, MSG_OOB, MSG_TRUNC, ...
SHUT_RD, SHUT_RDWR, SHUT_WR
INADDR_ANY, INADDR_BROADCAST, INADDR_LOOPBACK, INADDR_NONE
IPPROTO_IP, IPPROTO_IPV6, IPPROTO_TCP, ...
TCP_CORK, TCP_KEEPALIVE, TCP_NODELAY, ...
IN6ADDR_ANY, IN6ADDR_LOOPBACK
IPV6_ADD_MEMBERSHIP, IPV6_MTU, IPV6_V6ONLY, ...
STRUCTURE MANIPULATORS
$family = sockaddr_family $sockaddr
$sockaddr = pack_sockaddr_in $port, $ip_address
($port, $ip_address) = unpack_sockaddr_in $sockaddr
$sockaddr = sockaddr_in $port, $ip_address
($port, $ip_address) = sockaddr_in $sockaddr
$sockaddr = pack_sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]
($port, $ip6_address, $scope_id, $flowinfo) = unpack_sockaddr_in6 $sockaddr
$sockaddr = sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]
($port, $ip6_address, $scope_id, $flowinfo) = sockaddr_in6 $sockaddr
$sockaddr = pack_sockaddr_un $path
($path) = unpack_sockaddr_un $sockaddr
$sockaddr = sockaddr_un $path
($path) = sockaddr_un $sockaddr
$ip_mreq = pack_ip_mreq $multiaddr, $interface
($multiaddr, $interface) = unpack_ip_mreq $ip_mreq
$ip_mreq_source = pack_ip_mreq_source $multiaddr, $source, $interface
($multiaddr, $source, $interface) = unpack_ip_mreq_source $ip_mreq
$ipv6_mreq = pack_ipv6_mreq $multiaddr6, $ifindex
($multiaddr6, $ifindex) = unpack_ipv6_mreq $ipv6_mreq


=cut

}
