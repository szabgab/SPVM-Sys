class Sys::Socket {
  use Sys::Socket::Addrinfo;
  use Sys::Socket::Sockaddr;
  use Sys::Socket::In_addr;
  use Sys::Socket::In6_addr;
  use Fn;
  use Sys::Socket::Constant as Sock;
  use Sys::IO;
  use Sys;
  use Sys::IO::PollfdArray;

  native static method getaddrinfo : int ($node : string, $service : string,
                $hints : Sys::Socket::Addrinfo,
                $res : Sys::Socket::Addrinfo[]);

  native static method getnameinfo : int ($addr : Sys::Socket::Sockaddr, $addrlen : int,
                $host : mutable string, $hostlen : int,
                $serv : mutable string, $servlen : int, $flag : int);

  native static method gai_strerror : string($gai_error_code : int);

  native static method socket : int ($socket_family : int, $socket_type : int, $protocol : int);

  native static method connect : int ($sockfd : int, $addr : Sys::Socket::Sockaddr, $addrlen : int);

  native static method bind : int ($sockfd : int, $addr : Sys::Socket::Sockaddr, $addrlen : int);
                 
  native static method accept : int ($sockfd : int, $addr : Sys::Socket::Sockaddr, $addrlen_ref : int*);

  native static method listen : int ($sockfd : int, $backlog : int);

  native static method shutdown : int ($sockfd : int, $how : int);

  native static method recv : int ($sockfd : int, $buf : mutable string, $len : int, $flags : int);

  native static method send : int ($sockfd : int, $buf : string, $len : int, $flags : int);

  native static method getpeername : int ($sockfd : int, $addr : Sys::Socket::Sockaddr, $addrlen_ref : int*);

  native static method getsockname : int ($sockfd : int, $addr : Sys::Socket::Sockaddr, $addrlen_ref : int*);

  native static method socketpair : int ($domain : int, $type : int, $protocol : int, $pair : int[]);

  native static method setsockopt : int ($sockfd : int, $level : int, $optname : int, $optval : string, $optlen : int);

  native static method setsockopt_int : int ($sockfd : int, $level : int, $optname : int, $optval : int);

  native static method getsockopt : int ($sockfd : int, $level : int, $optname : int, $optval_ref : string[], $optlen_ref : int*);

  native static method getsockopt_int : int ($sockfd : int, $level : int, $optname : int, $optval_ref : int*);
  
  native static method inet_aton : int ($input_address : string, $output_address : Sys::Socket::In_addr);

  native static method inet_ntoa : string ($in_addr : Sys::Socket::In_addr);

  native static method inet_pton : int ($address_family : int, $input_address : string, $output_address : object of Sys::Socket::In_addr|Sys::Socket::In6_addr);
  
  native static method inet_ntop : string ($address_family : int, $input_address : object of Sys::Socket::In_addr|Sys::Socket::In6_addr, $output_address : mutable string, $size : int);
  
  static  method inet_ntop_simple : string ($address_family : int, $input_address : object of Sys::Socket::In_addr|Sys::Socket::In6_addr) {
    my $output_address = (mutable string)new_string_len(Sock->INET6_ADDRSTRLEN);
    
    my $output_address_ret = (mutable string)&inet_ntop($address_family, $input_address, $output_address, length $output_address);
    
    if ($output_address_ret) {
      &shorten_null_char($output_address_ret);
    }
    
    return $output_address_ret;
  }
  
  private static method shorten_null_char : void ($string : mutable string) {
    
    if (!$string) {
      die "The string must be defined";
    }
    
    my $null_char_offset = -1;
    for (my $i = 0; $i < length $string; $i++) {
      my $char = $string->[$i];
      if ($char == '\0') {
        $null_char_offset = $i;
        last;
      }
    }
    
    if ($null_char_offset >= 0) {
      Fn->shorten($string, $null_char_offset);
    }
  }
  
  native static method htonl : int ($host_int : int);
  
  native static method htons : short ($host_short : short);

  native static method ntohl : int ($net_int : int);
  
  native static method ntohs : short ($net_short : short);

  native static method ioctlsocket : int ($fd : int, $request : int, $arg_ref : int*);
  
  static method ioctl_portable : int ($fd : int, $request : int, $arg_ref : int*) {
    if (Sys->is_D_WIN32) {
      return Sys::Socket->ioctlsocket($fd, $request, $arg_ref);
    }
    else {
      return Sys::IO->ioctl_int($fd, $request, $arg_ref);
    }
  }

  native static method poll_win : int ($fds : Sys::IO::PollfdArray, $nfds : int, $timeout : int);

  static method poll_portable : int ($fds : Sys::IO::PollfdArray, $nfds : int, $timeout : int) {
    if (Sys->is_D_WIN32) {
      return Sys::Socket->poll_win($fds, $nfds, $timeout);
    }
    else {
      return Sys::IO->poll($fds, $nfds, $timeout);
    }
  }
}
