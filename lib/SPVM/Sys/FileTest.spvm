class Sys::FileTest {
  use Sys::Stat;
  
  native static method r : int ($file : string);
  native static method w : int ($file : string);
  native static method x : int ($file : string);
  native static method o : int ($file : string);
  native static method R : int ($file : string);
  native static method W : int ($file : string);
  native static method X : int ($file : string);
  native static method O : int ($file : string);
  static method e : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };
    
    my $file_exist = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      $file_exist = 1;
    }
    
    return $file_exist;
  }
  
  native static method z : int ($file : string);
  native static method s : int ($file : string);
  static method f : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };

    my $regular_file_exist = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if (($stat->st_mode & Sys::Stat->S_IFMT) == Sys::Stat->S_IFREG) {
        $regular_file_exist = 1;
      }
    }
    
    return $regular_file_exist;
  }
  
  static method d : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };

    my $directory_exist = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if (($stat->st_mode & Sys::Stat->S_IFMT) == Sys::Stat->S_IFDIR) {
        $directory_exist = 1;
      }
    }
    
    return $directory_exist;
  }
  
  native static method l : int ($file : string);
  native static method p : int ($file : string);
  native static method S : int ($file : string);
  native static method b : int ($file : string);
  native static method c : int ($file : string);
  native static method t : int ($file : string);
  native static method u : int ($file : string);
  native static method g : int ($file : string);
  native static method k : int ($file : string);
  native static method T : int ($file : string);
  native static method B : int ($file : string);
  native static method M : int ($file : string);
  native static method A : int ($file : string);
  native static method C : int ($file : string);
}