class Sys::FileTest {
  use Sys::Stat;
  use Sys::IO;
  use Sys::IO::Constant as IOC;
  
  # static method r : int ($file : string);
  # static method w : int ($file : string);
  # static method x : int ($file : string);
  # static method o : int ($file : string);
  static method R : int ($file : string) {
    unless ($file) {
      die "The file must be defined";
    }
    
    my $status = Sys::IO->access($file, IOC->R_OK);
    
    my $ok = 0;
    if ($status == 0) {
      $ok = 0;
    }
    
    return $ok;
  }
  
  static method W : int ($file : string) {
    unless ($file) {
      die "The file must be defined";
    }
    
    my $status = Sys::IO->access($file, IOC->W_OK);
    
    my $ok = 0;
    if ($status == 0) {
      $ok = 0;
    }
    
    return $ok;
  }

  static method X : int ($file : string) {
    unless ($file) {
      die "The file must be defined";
    }
    
    my $status = Sys::IO->access($file, IOC->X_OK);
    
    my $ok = 0;
    if ($status == 0) {
      $ok = 0;
    }
    
    return $ok;
  }
  
  # static method W : int ($file : string);
  # static method X : int ($file : string);
  # static method O : int ($file : string);
  static method e : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };
    
    my $file_exist = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      $file_exist = 1;
    }
    
    return $file_exist;
  }
  
  static method z : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    Sys::Stat->stat($file, $stat);
    
    my $size = $stat->st_size;
    
    my $zero = 0;
    if ($size == 0) {
      $zero = 1;
    }
    
    return $zero;
  }
  
  static method s : long ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    Sys::Stat->stat($file, $stat);
    
    my $size = $stat->st_size;
    
    return $size;
  }
  
  static method f : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };

    my $regular_file_exist = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if (($stat->st_mode & Sys::Stat->S_IFMT) == Sys::Stat->S_IFREG) {
        $regular_file_exist = 1;
      }
    }
    
    return $regular_file_exist;
  }
  
  static method d : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };

    my $directory_exist = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if (($stat->st_mode & Sys::Stat->S_IFMT) == Sys::Stat->S_IFDIR) {
        $directory_exist = 1;
      }
    }
    
    return $directory_exist;
  }
  
  static method l : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };
    
    # Symbolic link
    my $ok = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if (($stat->st_mode & Sys::Stat->S_IFMT) == Sys::Stat->S_IFLNK) {
        $ok = 1;
      }
    }
    
    return $ok;
  }
  
  static method p : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };
    
    # FIFO/PIPE
    my $ok = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if (($stat->st_mode & Sys::Stat->S_IFMT) == Sys::Stat->S_IFIFO) {
        $ok = 1;
      }
    }
    
    return $ok;
  }
  
  static method S : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };
    
    # Socket
    my $ok = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if (($stat->st_mode & Sys::Stat->S_IFMT) == Sys::Stat->S_IFSOCK) {
        $ok = 1;
      }
    }
    
    return $ok;
  }
  
  static method b : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };
    
    # Block device
    my $ok = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if (($stat->st_mode & Sys::Stat->S_IFMT) == Sys::Stat->S_IFBLK) {
        $ok = 1;
      }
    }
    
    return $ok;
  }
  
  static method c : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };
    
    # Character device
    my $ok = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if (($stat->st_mode & Sys::Stat->S_IFMT) == Sys::Stat->S_IFCHR) {
        $ok = 1;
      }
    }
    
    return $ok;
  }
  
  # static method t : int ($file : string);
  
  static method u : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };
    
    # Character device
    my $ok = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if ($stat->st_mode & Sys::Stat->S_ISUID) {
        $ok = 1;
      }
    }
    
    return $ok;
  }
  
  static method g : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };
    
    # Character device
    my $ok = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if ($stat->st_mode & Sys::Stat->S_ISGID) {
        $ok = 1;
      }
    }
    
    return $ok;
  }
  
  static method k : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    eval { Sys::Stat->stat($file, $stat); };
    
    # Character device
    my $ok = 0;
    if ($@) {
      unless (error == class_id Error::System) {
        die $@;
      }
    }
    else {
      if ($stat->st_mode & Sys::Stat->S_ISVTX) {
        $ok = 1;
      }
    }
    
    return $ok;
  }
  
  # static method T : int ($file : string);
  # static method B : int ($file : string);
  
  static method M : double ($file : string, $base_time : long) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    Sys::Stat->stat($file, $stat);
    
    my $mtime = $stat->st_mtime;
    
    my $result_time = ($base_time - $mtime) / 86400.0;
    
    return $result_time;
  }
  
  static method A : double ($file : string, $base_time : long) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    Sys::Stat->stat($file, $stat);
    
    my $atime = $stat->st_atime;
    
    my $result_time = ($base_time - $atime) / 86400.0;
    
    return $result_time;
  }
  
  static method C : double ($file : string, $base_time : long) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::Stat->new;
    
    Sys::Stat->stat($file, $stat);
    
    my $ctime = $stat->st_ctime;
    
    my $result_time = ($base_time - $ctime) / 86400.0;
    
    return $result_time;
  }
}